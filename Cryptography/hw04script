Script started on 2023-11-13 16:50:01-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
[?2004h]0;kim@ubuntu: ~/Documents/Homework/hw04[01;32mkim@ubuntu[00m:[01;34m~/Documents/Homework/hw04[00m$ cat crypto.h
[?2004l/*
 * Kim Magidhi
 * crypto.h - Header file for the Crypto class.
 *
 * This file defines the Crypto class, which provides encryption and decryption
 * functionality using a specified key and operation sequence. 
 *
 * Date: 11/13/2023
 */


#ifndef CRYPTO_H
#define CRYPTO_H

#include <QString>
#include <QVector>

class Crypto {
public:
    // Constructor
    Crypto(unsigned int key, const QString& opSequence);

    // Encrypts the given text using the specified operations
    QString encrypt(const QString& text);

    // Decrypts the given ciphertext using the specified operations
    QString decrypt(const QString& ciphertext);

private:
    unsigned int m_Key;        // Encryption/decryption key
    QString m_OpSequence;      // Operation sequence for encryption/decryption

    // Shifts characters in the text by the key
    QString shift(const QString& text, unsigned int key);

    // Unshifts characters in the ciphertext by the key
    QString unshift(const QString& ciphertext, unsigned int key);

    // Permutes characters in the text based on the key
    QString permute(const QString& text, unsigned int key);

    // Unpermutes characters in the ciphertext based on the key
    QString unpermute(const QString& scrtext, unsigned int key);

    // Generates a random integer within the specified range
    int limitedRand(int min, int max);

    // Generates a random permutation of integers based on the key
    QVector<int> randomPerm(int n, unsigned int key);
};

#endif


[?2004h]0;kim@ubuntu: ~/Documents/Homework/hw04[01;32mkim@ubuntu[00m:[01;34m~/Documents/Homework/hw04[00m$ cat crypto.cpp
[?2004l/*
 * Kim Magidhi
 * crypto.cpp - Implementation file for the Crypto class.
 *
 * This file contains the implementation of the Crypto class defined in the crypto.h header.
 * It provides the encryption and decryption functionality using a specified key and operation
 * sequence. 
 *
 * Date: 11/13/2023
 */

#include "crypto.h"
#include <cstdlib>
#include <QDebug>
#include <algorithm>  // Added for std::swap

// Constructor that initializes the Crypto object with a key and operation sequence
Crypto::Crypto(unsigned int key, const QString& opSequence)
    : m_Key(key), m_OpSequence(opSequence) {}

// Encrypts the given text 
QString Crypto::encrypt(const QString& text) {
    QString result = text;

    for (const QChar& op : m_OpSequence) {
        switch (op.toLatin1()) {
            case 'p':
                result = permute(result, m_Key);
                break;
            case 's':
                result = shift(result, m_Key);
                break;
            default:
                qWarning() << "Unknown operation encountered during encryption: " << op; // For unknown operation
                break;
        }
    }

    return result;
}

// Decrypts the given ciphertext 
QString Crypto::decrypt(const QString& ciphertext) {
    QString result = ciphertext;

    for (int i = m_OpSequence.length() - 1; i >= 0; --i) {
        const QChar& op = m_OpSequence[i];
        switch (op.toLatin1()) {
            case 'p':
                result = unpermute(result, m_Key);
                break;
            case 's':
                result = unshift(result, m_Key);
                break;
            default:
                qWarning() << "Unknown operation encountered during decryption: " << op; // For unknown operation
                break;
        }
    }

    return result;
}

// Shifts characters in the text by the key
QString Crypto::shift(const QString& text, unsigned int key) {
    QString result = text;

    for (QChar& ch : result) {
        int shiftAmount = limitedRand(1, 128);  // Shift amount between 1 and 128
        ch = static_cast<QChar>((ch.toLatin1() + shiftAmount + key) % 128);
    }

    return result;
}

// Unshifts characters in the ciphertext by the key
QString Crypto::unshift(const QString& ciphertext, unsigned int key) {
    QString result = ciphertext;

    for (QChar& ch : result) {
        int shiftAmount = limitedRand(1, 128);  // Shift amount between 1 and 128
        ch = static_cast<QChar>((ch.toLatin1() - shiftAmount - key + 128) % 128);
    }

    return result;
}

// Permutes characters in the text based on the key
QString Crypto::permute(const QString& text, unsigned int key) {
    QString result = text;
    QVector<int> permutation = randomPerm(result.length(), key);

    for (int i = 0; i < result.length(); ++i) {
        result[i] = text[permutation[i]];
    }

    return result;
}

// Unpermutes characters in the ciphertext based on the key
QString Crypto::unpermute(const QString& scrtext, unsigned int key) {
    QString result = scrtext;
    QVector<int> permutation = randomPerm(result.length(), key);

    for (int i = 0; i < result.length(); ++i) {
        result[permutation[i]] = scrtext[i];
    }

    return result;
}

// Generates a random integer within the specified range
int Crypto::limitedRand(int min, int max) {
    return min + (rand() % (max - min + 1));
}

// Generates a random permutation of integers based on the key
QVector<int> Crypto::randomPerm(int n, unsigned int key) {
    QVector<int> result;
    for (int i = 0; i < n; ++i) {
        result.append(i);
    }

    std::srand(key);
    for (int i = n - 1; i > 0; --i) {
        int j = limitedRand(0, i);
        std::swap(result[i], result[j]);
    }

    return result;
}

[?2004h]0;kim@ubuntu: ~/Documents/Homework/hw04[01;32mkim@ubuntu[00m:[01;34m~/Documents/Homework/hw04[00m$ cat hw04.pro
[?2004l######################################################################
# Automatically generated by qmake (3.1) Mon Nov 13 16:43:17 2023
######################################################################

TEMPLATE = app
TARGET = hw04
INCLUDEPATH += .

# You can make your code fail to compile if you use deprecated APIs.
# In order to do so, uncomment the following line.
# Please consult the documentation of the deprecated API in order to know
# how to port your code away from it.
# You can also select to disable deprecated APIs only up to a certain version of Qt.
#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0

# Input
HEADERS += crypto.h
SOURCES += crypto-client.cpp crypto.cpp
[?2004h]0;kim@ubuntu: ~/Documents/Homework/hw04[01;32mkim@ubuntu[00m:[01;34m~/Documents/Homework/hw04[00m$ make
[?2004lmake: Nothing to be done for 'first'.
[?2004h]0;kim@ubuntu: ~/Documents/Homework/hw04[01;32mkim@ubuntu[00m:[01;34m~/Documents/Homework/hw04[00m$ ./hw04 
[?2004lOriginal string: asdfghjkl;QWERTYUIOP{}}|123456&*()_+zxcvnm,,, ./?
Length: 49
Encrypted string (Printable characters only): la*37YG!7sir4N9"1`Rr?sd^0T]po|g#d/_
Recovered string: asdfghjkl;QWERTYUIOP{}}|123456&*()_+zxcvnm,,, ./?
Decryption successful!
[?2004h]0;kim@ubuntu: ~/Documents/Homework/hw04[01;32mkim@ubuntu[00m:[01;34m~/Documents/Homework/hw04[00m$ [K]0;kim@ubuntu: ~/Documents/Homework/hw04[01;32mkim@ubuntu[00m:[01;34m~/Documents/Homework/hw04[00m$ [K]0;kim@ubuntu: ~/Documents/Homework/hw04[01;32mkim@ubuntu[00m:[01;34m~/Documents/Homework/hw04[00m$ [K]0;kim@ubuntu: ~/Documents/Homework/hw04[01;32mkim@ubuntu[00m:[01;34m~/Documents/Homework/hw04[00m$ [K]0;kim@ubuntu: ~/Documents/Homework/hw04[01;32mkim@ubuntu[00m:[01;34m~/Documents/Homework/hw04[00m$ [K]0;kim@ubuntu: ~/Documents/Homework/hw04[01;32mkim@ubuntu[00m:[01;34m~/Documents/Homework/hw04[00m$ [K]0;kim@ubuntu: ~/Documents/Homework/hw04[01;32mkim@ubuntu[00m:[01;34m~/Documents/Homework/hw04[00m$ [K]0;kim@ubuntu: ~/Documents/Homework/hw04[01;32mkim@ubuntu[00m:[01;34m~/Documents/Homework/hw04[00m$ [K]0;kim@ubuntu: ~/Documents/Homework/hw04[01;32mkim@ubuntu[00m:[01;34m~/Documents/Homework/hw04[00m$ [K]0;kim@ubuntu: ~/Documents/Homework/hw04[01;32mkim@ubuntu[00m:[01;34m~/Documents/Homework/hw04[00m$ [K]0;kim@ubuntu: ~/Documents/Homework/hw04[01;32mkim@ubuntu[00m:[01;34m~/Documents/Homework/hw04[00m$ [K]0;kim@ubuntu: ~/Documents/Homework/hw04[01;32mkim@ubuntu[00m:[01;34m~/Documents/Homework/hw04[00m$ [K]0;kim@ubuntu: ~/Documents/Homework/hw04[01;32mkim@ubuntu[00m:[01;34m~/Documents/Homework/hw04[00m$ [K]0;kim@ubuntu: ~/Documents/Homework/hw04[01;32mkim@ubuntu[00m:[01;34m~/Documents/Homework/hw04[00m$ [K]0;kim@ubuntu: ~/Documents/Homework/hw04[01;32mkim@ubuntu[00m:[01;34m~/Documents/Homework/hw04[00m$ [K]0;kim@ubuntu: ~/Documents/Homework/hw04[01;32mkim@ubuntu[00m:[01;34m~/Documents/Homework/hw04[00m$ [K]0;kim@ubuntu: ~/Documents/Homework/hw04[01;32mkim@ubuntu[00m:[01;34m~/Documents/Homework/hw04[00m$ ./hw04 
[?2004lOriginal string: asdfghjkl;QWERTYUIOP{}}|123456&*()_+zxcvnm,,, ./?
Length: 49
Encrypted string (Printable characters only): w9$E%5%fj:90fKi}"0VkD}s]n_X(xN}p,rh4L"(0|
Recovered string: asdfghjkl;QWERTYUIOP{}}|123456&*()_+zxcvnm,,, ./?
Decryption successful!
[?2004h]0;kim@ubuntu: ~/Documents/Homework/hw04[01;32mkim@ubuntu[00m:[01;34m~/Documents/Homework/hw04[00m$ ./hw04 
[?2004lOriginal string: asdfghjkl;QWERTYUIOP{}}|123456&*()_+zxcvnm,,, ./?
Length: 49
Encrypted string (Printable characters only): yy8Jo%)wP;F6F_BH:#=1T:Mx]6k,a.&XDq
Recovered string: asdfghjkl;QWERTYUIOP{}}|123456&*()_+zxcvnm,,, ./?
Decryption successful!
[?2004h]0;kim@ubuntu: ~/Documents/Homework/hw04[01;32mkim@ubuntu[00m:[01;34m~/Documents/Homework/hw04[00m$ exit
[?2004lexit

Script done on 2023-11-13 16:52:30-05:00 [COMMAND_EXIT_CODE="0"]
