Script started on 2023-10-31 19:34:33-04:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
[?2004h]0;kim@ubuntu: ~/Documents/hw02[01;32mkim@ubuntu[00m:[01;34m~/Documents/hw02[00m$ [K]0;kim@ubuntu: ~/Documents/hw02[01;32mkim@ubuntu[00m:[01;34m~/Documents/hw02[00m$ [K]0;kim@ubuntu: ~/Documents/hw02[01;32mkim@ubuntu[00m:[01;34m~/Documents/hw02[00m$ [K]0;kim@ubuntu: ~/Documents/hw02[01;32mkim@ubuntu[00m:[01;34m~/Documents/hw02[00m$ [K]0;kim@ubuntu: ~/Documents/hw02[01;32mkim@ubuntu[00m:[01;34m~/Documents/hw02[00m$ [K]0;kim@ubuntu: ~/Documents/hw02[01;32mkim@ubuntu[00m:[01;34m~/Documents/hw02[00m$ [K]0;kim@ubuntu: ~/Documents/hw02[01;32mkim@ubuntu[00m:[01;34m~/Documents/hw02[00m$ [K]0;kim@ubuntu: ~/Documents/hw02[01;32mkim@ubuntu[00m:[01;34m~/Documents/hw02[00m$ [K]0;kim@ubuntu: ~/Documents/hw02[01;32mkim@ubuntu[00m:[01;34m~/Documents/hw02[00m$ [K]0;kim@ubuntu: ~/Documents/hw02[01;32mkim@ubuntu[00m:[01;34m~/Documents/hw02[00m$ [K]0;kim@ubuntu: ~/Documents/hw02[01;32mkim@ubuntu[00m:[01;34m~/Documents/hw02[00m$ [K]0;kim@ubuntu: ~/Documents/hw02[01;32mkim@ubuntu[00m:[01;34m~/Documents/hw02[00m$ [K]0;kim@ubuntu: ~/Documents/hw02[01;32mkim@ubuntu[00m:[01;34m~/Documents/hw02[00m$ [K]0;kim@ubuntu: ~/Documents/hw02[01;32mkim@ubuntu[00m:[01;34m~/Documents/hw02[00m$ [K]0;kim@ubuntu: ~/Documents/hw02[01;32mkim@ubuntu[00m:[01;34m~/Documents/hw02[00m$ [K]0;kim@ubuntu: ~/Documents/hw02[01;32mkim@ubuntu[00m:[01;34m~/Documents/hw02[00m$ [K]0;kim@ubuntu: ~/Documents/hw02[01;32mkim@ubuntu[00m:[01;34m~/Documents/hw02[00m$ cat date.h
[?2004l/*
 * Kim Magidhi
 * date.h - Header file for the Date class.
 *
 * This file defines the Date class, which represents 
 * dates using the number of days since a fixed base date. 
 * It includes methods for date manipulation, formatting, 
 * and utility functions.
 *
 * Date: 10/31/2023
*/

#ifndef DATE_H
#define DATE_H

#include <QString>

class Date {
public:
    // Constructors
    Date();  // Default constructor
    Date(int y, int m, int d);  // Constructor with year month and day parameters
    void set(int y, int m, int d);  

    // Date Formatting
    QString toString(bool brief = false) const;  // Convert the date to a formatted string
    void setToToday();  // Set the date to the current system date

    // Date Information
    QString getWeekDay() const;  // Get the day of the week for the date
    bool lessThan(const Date& d) const;  // Compare dates to check if the current date is less than another date
    bool equals(const Date& d) const;  // Compare dates to check if they are equal
    int daysBetween(const Date& d) const;  // Calculate the number of days between two dates
    Date addDays(int days) const;  // Add a specified number of days to the date

    static bool leapYear(int year);  // Check if a given year is a leap year
    static QString monthName(int month);  // Get the name of the month
    static int yearDays(int year);  // Calculate the number of days in a year
    static int monthDays(int month, int year);  // Calculate the number of days in a month

private:
    int m_DaysSinceBaseDate;  // Number of days since the base date
    static int baseYear;  // Base year used for date calculations

    // Private Helper Functions
    int ymd2dsbd(int y, int m, int d) const;  // Calculate the number of days since the base date
    void getYMD(int& y, int& m, int& d) const;  // Get the year, month, and day from the date

    // Function to check if a date is valid
    bool isValidDate(int y, int m, int d) const;  // Check if the date is valid
};

#endif

[?2004h]0;kim@ubuntu: ~/Documents/hw02[01;32mkim@ubuntu[00m:[01;34m~/Documents/hw02[00m$ cat date.cpp
[?2004l/*
 * Kim Magidhi
 * date.cpp - Implementation file for the Date class.
 *
 * This file has the implementations of the methods 
 * defined in the Date class. It handles date calculations, 
 * formatting, and basic utility functions for working with dates.
 *
 * Date: 10/31/2023
*/

#include "date.h"
#include <QDate>

int Date::baseYear = 1900;// Initialize the base year to 1900

//Constructors
// Default constructor: Initialize the date to the base date
Date::Date() : m_DaysSinceBaseDate(0) {}
// Constructor with year, month, and day parameters
Date::Date(int y, int m, int d) {
    if (isValidDate(y, m, d)) {
        m_DaysSinceBaseDate = ymd2dsbd(y, m, d);
    } else {
        // Handle invalid date 
        m_DaysSinceBaseDate = ymd2dsbd(baseYear, 1, 1);
    }
}

// Set the date using year, month, and day
void Date::set(int y, int m, int d) {
    if (isValidDate(y, m, d)) {
        m_DaysSinceBaseDate = ymd2dsbd(y, m, d);
    } else {
        m_DaysSinceBaseDate = ymd2dsbd(baseYear, 1, 1);
    }
}

// Check if a date is valid
bool Date::isValidDate(int y, int m, int d) const {
    // Check if the year is greater than or equal to the base year and month/day are within valid ranges.
    return (y >= baseYear && m >= 1 && m <= 12 && d >= 1 && d <= QDate(y, m, 1).daysInMonth());
}

// Convert the date to a formatted string
QString Date::toString(bool brief) const {
    int y, m, d;
    getYMD(y, m, d);
    if (brief) {
        return QString("%1/%2/%3").arg(y).arg(m).arg(d);
    } else {
        return QString("%1-%2-%3").arg(y).arg(m).arg(d);
    }
}

// Set the date to the current system date
void Date::setToToday() {
    QDate currentDate = QDate::currentDate();
    set(currentDate.year(), currentDate.month(), currentDate.day());
}

// Get the day of the week for the date
QString Date::getWeekDay() const {
    QDate baseDate(1900, 1, 1);
    int daysSinceBase = m_DaysSinceBaseDate - baseDate.toJulianDay();
    QDate current = baseDate.addDays(daysSinceBase);
    return current.toString("dddd");
}

// Compare dates
bool Date::lessThan(const Date& d) const {
    return m_DaysSinceBaseDate < d.m_DaysSinceBaseDate;
}

//Checkas if the dates are equal
bool Date::equals(const Date& d) const {
    return m_DaysSinceBaseDate == d.m_DaysSinceBaseDate;
}

// Calculate the number of days between two dates
int Date::daysBetween(const Date& d) const {
    return d.m_DaysSinceBaseDate - m_DaysSinceBaseDate;
}

// Add a specified number of days to the date
Date Date::addDays(int days) const {
    QDate baseDate(1900, 1, 1); // Base date
    QDate currentDate = baseDate.addDays(m_DaysSinceBaseDate);
    QDate futureDate = currentDate.addDays(days);
    return Date(futureDate.year(), futureDate.month(), futureDate.day());
}

// Check if a given year is a leap year
bool Date::leapYear(int year) {
    return QDate::isLeapYear(year);
}

// Get the name of the month
QString Date::monthName(int month) {
    return QDate::longMonthName(month);
}

// Calculate the number of days in a year
int Date::yearDays(int year) {
    return QDate(year, 12, 31).dayOfYear();
}

// Calculate the number of days in a month
int Date::monthDays(int month, int year) {
    return QDate(year, month, 1).daysInMonth();
}

// Calculate the number of days since the base date
int Date::ymd2dsbd(int y, int m, int d) const {
    QDate baseDate(baseYear, 1, 1);
    QDate currentDate(y, m, d);
    return baseDate.daysTo(currentDate);
}

// Get the year, month, and day from the date
void Date::getYMD(int& y, int& m, int& d) const {
    QDate baseDate(baseYear, 1, 1);
    QDate currentDate = baseDate.addDays(m_DaysSinceBaseDate);
    y = currentDate.year();
    m = currentDate.month();
    d = currentDate.day();
}

[?2004h]0;kim@ubuntu: ~/Documents/hw02[01;32mkim@ubuntu[00m:[01;34m~/Documents/hw02[00m$ cat date-test.cpp
[?2004l/*
 * Kim Magidhi
 * date-test.cpp - Client code for testing the Date class.
 *
 * This file contains the main function and the code for testing the 
 * functionality of the Date class. It creates Date objects, calls 
 * the class methods, and shows the use of the Date class.
 *
 * Date: 10/31/2023
 *
 * Did not use "using namespace std" as it is considerd bad 
 * practise by many sources including: https://www.geeksforgeeks.org/using-namespace-std-considered-bad-practice/#
*/

#include <iostream>
#include "date.h"

int main() {
    // Create Date objects and test their functionality
    Date date1; // Default constructor (base date)
    Date date2(2020, 10, 31);// Valid date
    Date date3(2022, 2, 29); // Invalid date (leap year)
    Date date4(1900, 2, 29); // Invalid date (not a leap year)

    // Set date to today
    date1.setToToday();

    // Test toString function
    std::cout << "Date 1: " << date1.toString().toStdString() << std::endl;
    std::cout << "Date 2: " << date2.toString().toStdString() << std::endl;
    std::cout << "Date 3: " << date3.toString().toStdString() << std::endl;
    std::cout << "Date 4: " << date4.toString().toStdString() << '\n' << std::endl;

    // Test getWeekDay function
    std::cout << "Date 1 (Day of the week): " << date1.getWeekDay().toStdString() << std::endl;
    std::cout << "Date 2 (Day of the week): " << date2.getWeekDay().toStdString() << '\n' << std::endl;

    // Test date comparisons
    std::cout << "Date 1 less than Date 2: " << (date1.lessThan(date2) ? "Yes" : "No") << std::endl;
    std::cout << "Date 2 equals Date 2: " << (date2.equals(date2) ? "Yes" : "No") << '\n' << std::endl;

    // Test daysBetween function
    int daysDiff = date2.daysBetween(date1);
    std::cout << "Days between Date 1 and Date 2: " << daysDiff << '\n' << std::endl;

    // Test addDays function
    Date futureDate = date1.addDays(18);
    std::cout << "Date 1 + 18 days: " << futureDate.toString().toStdString() << '\n' << std::endl;

    // Test static utility functions
    int year = 2024;
    std::cout << year << " is a leap year: " << (Date::leapYear(year) ? "Yes" : "No") << std::endl;
    int month = 9;
    std::cout << "Month " << month << " is " << Date::monthName(month).toStdString() << std::endl;

    return 0;
}

[?2004h]0;kim@ubuntu: ~/Documents/hw02[01;32mkim@ubuntu[00m:[01;34m~/Documents/hw02[00m$ cat hw02.pro
[?2004l######################################################################
# Automatically generated by qmake (3.1) Tue Oct 31 09:51:43 2023
######################################################################

TEMPLATE = app
TARGET = hw02
INCLUDEPATH += .

# You can make your code fail to compile if you use deprecated APIs.
# In order to do so, uncomment the following line.
# Please consult the documentation of the deprecated API in order to know
# how to port your code away from it.
# You can also select to disable deprecated APIs only up to a certain version of Qt.
#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0

# Input
HEADERS += date.h
SOURCES += date-test.cpp date.cpp
[?2004h]0;kim@ubuntu: ~/Documents/hw02[01;32mkim@ubuntu[00m:[01;34m~/Documents/hw02[00m$ make
[?2004lg++ -c -pipe -O2 -Wall -Wextra -D_REENTRANT -fPIC -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB -I. -I. -I/usr/include/aarch64-linux-gnu/qt5 -I/usr/include/aarch64-linux-gnu/qt5/QtGui -I/usr/include/aarch64-linux-gnu/qt5/QtCore -I. -I/usr/lib/aarch64-linux-gnu/qt5/mkspecs/linux-g++ -o date-test.o date-test.cpp
g++ -c -pipe -O2 -Wall -Wextra -D_REENTRANT -fPIC -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB -I. -I. -I/usr/include/aarch64-linux-gnu/qt5 -I/usr/include/aarch64-linux-gnu/qt5/QtGui -I/usr/include/aarch64-linux-gnu/qt5/QtCore -I. -I/usr/lib/aarch64-linux-gnu/qt5/mkspecs/linux-g++ -o date.o date.cpp
[01m[Kdate.cpp:[m[K In static member function ‘[01m[Kstatic QString Date::monthName(int)[m[K’:
[01m[Kdate.cpp:100:19:[m[K [01;35m[Kwarning: [m[K‘[01m[Kstatic QString QDate::longMonthName(int, QDate::MonthNameType)[m[K’ is deprecated: Use QLocale::monthName or QLocale::standaloneMonthName [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wdeprecated-declarations-Wdeprecated-declarations]8;;[m[K]
  100 |     return QDate::[01;35m[KlongMonthName[m[K(month);
      |                   [01;35m[K^~~~~~~~~~~~~[m[K
In file included from [01m[K/usr/include/aarch64-linux-gnu/qt5/QtCore/QDate:1[m[K,
                 from [01m[Kdate.cpp:13[m[K:
[01m[K/usr/include/aarch64-linux-gnu/qt5/QtCore/qdatetime.h:110:24:[m[K [01;36m[Knote: [m[Kdeclared here
  110 |         static QString [01;36m[KlongMonthName[m[K(int month, MonthNameType type = DateFormat);
      |                        [01;36m[K^~~~~~~~~~~~~[m[K
[01m[Kdate.cpp:100:32:[m[K [01;35m[Kwarning: [m[K‘[01m[Kstatic QString QDate::longMonthName(int, QDate::MonthNameType)[m[K’ is deprecated: Use QLocale::monthName or QLocale::standaloneMonthName [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wdeprecated-declarations-Wdeprecated-declarations]8;;[m[K]
  100 |     return [01;35m[KQDate::longMonthName(month)[m[K;
      |            [01;35m[K~~~~~~~~~~~~~~~~~~~~^~~~~~~[m[K
In file included from [01m[K/usr/include/aarch64-linux-gnu/qt5/QtCore/QDate:1[m[K,
                 from [01m[Kdate.cpp:13[m[K:
[01m[K/usr/include/aarch64-linux-gnu/qt5/QtCore/qdatetime.h:110:24:[m[K [01;36m[Knote: [m[Kdeclared here
  110 |         static QString [01;36m[KlongMonthName[m[K(int month, MonthNameType type = DateFormat);
      |                        [01;36m[K^~~~~~~~~~~~~[m[K
g++ -Wl,-O1 -o hw02 date-test.o date.o   /usr/lib/aarch64-linux-gnu/libQt5Gui.so /usr/lib/aarch64-linux-gnu/libQt5Core.so -lGL -lpthread   
[?2004h]0;kim@ubuntu: ~/Documents/hw02[01;32mkim@ubuntu[00m:[01;34m~/Documents/hw02[00m$ ./hw02 
[?2004lDate 1: 2023-10-31
Date 2: 2020-10-31
Date 3: 1900-1-1
Date 4: 1900-1-1

Date 1 (Day of the week): Tuesday
Date 2 (Day of the week): Saturday

Date 1 less than Date 2: No
Date 2 equals Date 2: Yes

Days between Date 1 and Date 2: 1095

Date 1 + 18 days: 2023-11-18

2024 is a leap year: Yes
Month 9 is September
[?2004h]0;kim@ubuntu: ~/Documents/hw02[01;32mkim@ubuntu[00m:[01;34m~/Documents/hw02[00m$ exit
[?2004lexit

Script done on 2023-10-31 19:37:47-04:00 [COMMAND_EXIT_CODE="0"]
